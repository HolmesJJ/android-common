plugins {
    id 'com.android.application'
}

static def releaseTime() {
    return new Date().format("yyyy.MM.dd", TimeZone.getTimeZone("UTC"))
}

android {
    signingConfigs {
        release {
            storeFile file('../keystore/release.jks')
            keyAlias 'common'
            keyPassword 'common'
            storePassword 'common'
        }
        debug {
            storeFile file('../keystore/debug.keystore')
        }
    }
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.flavorName}-v${versionName}-${variant.buildType.name}-build${versionCode}-${releaseTime()}.apk"
                }
            }
        }
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.flavorName}-v${versionName}-${variant.buildType.name}-build${versionCode}-${releaseTime()}.apk"
                }
            }
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies["appcompat"]
    implementation rootProject.ext.dependencies["google-material"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    // lifecycle
    implementation rootProject.ext.dependencies["lifecycle-viewmodel"]
    implementation rootProject.ext.dependencies["lifecycle-livedata"]
    implementation rootProject.ext.dependencies["lifecycle-runtime"]
    implementation rootProject.ext.dependencies["lifecycle-common-java8"]
    implementation rootProject.ext.dependencies["lifecycle-reactivestreams"]
    implementation rootProject.ext.dependencies["arch-core-testing"]
    // permission
    implementation rootProject.ext.dependencies["easypermissions"]
    // fastJson
    implementation rootProject.ext.dependencies["fastjson"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["test-ext"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
}